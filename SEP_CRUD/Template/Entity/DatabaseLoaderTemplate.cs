// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SEP_CRUD.Template.Entity
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SEP_CRUD.Entities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class DatabaseLoaderTemplate : DatabaseLoaderTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data.SqlClient;\r\nu" +
                    "sing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace ");
            
            #line 13 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generator.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class DatabaseLoader\r\n    {\r\n\t public List<string> SavedTableBind" +
                    "ingNames { get; } = new List<string>\r\n        {\r\n");
            
            #line 19 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"

Entities entities = Entities.Instance;
Table table;
int count = entities.Tables.Count;
int i = 0;
foreach (var t in entities.Tables)
{
	table = t.Value;
	if(i!=count-1) 
	WriteLine("		\""+table.BindingName+"\",");
	else 
	WriteLine("		\""+table.BindingName+"\"");
	i++;
}
		
            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n        public List<string> SavedTableDatabaseNames { get; } = new " +
                    "List<string>\r\n        {\r\n");
            
            #line 38 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"

i = 0;
foreach (var t in entities.Tables)
{
	table = t.Value;
	if(i!=count-1) 
	WriteLine("		\""+table.DatabaseName+"\",");
	else 
	WriteLine("		\""+table.DatabaseName+"\"");
	i++;
}

            
            #line default
            #line hidden
            this.Write("\t\t};\r\n\r\n\t\t public string FindSavedTableDatabaseNameByBindingName(string name)\r\n  " +
                    "      {\r\n            int index = SavedTableBindingNames.IndexOf(name);\r\n        " +
                    "    if (index != -1) return SavedTableDatabaseNames[index];\r\n            return " +
                    "null;\r\n        }\r\n\r\n        public string FindSavedTableBindingNameByDatabaseNam" +
                    "e(string name)\r\n        {\r\n            int index = SavedTableDatabaseNames.Index" +
                    "Of(name);\r\n            if (index != -1) return SavedTableBindingNames[index];\r\n " +
                    "           return null;\r\n        }\r\n\r\n        public Result DatabaseMatching()\r\n" +
                    "        {\r\n            Result r = Result.Create(true);\r\n            if (!Connect" +
                    "ed) r = Result.Create(\"Database is not connected\");\r\n            \r\n            i" +
                    "f(r.OK)\r\n            {\r\n                try\r\n                {\r\n                " +
                    "    List<string> latestTables = LoadTableNames();\r\n                    List<stri" +
                    "ng> savedTables = SavedTableDatabaseNames;\r\n                    foreach (string " +
                    "s in savedTables)\r\n                    {\r\n                        if(!latestTabl" +
                    "es.Contains(s))\r\n                        {\r\n                            r = Resu" +
                    "lt.Create(\"Database doesn\'t match records (Database misses the table\\\"\"+s+\"\\\"\");" +
                    "\r\n                            break;\r\n                        }\r\n               " +
                    "     }\r\n                } catch( Exception e)\r\n                {\r\n              " +
                    "      r = Result.Create(\"Error: \" + e.Message);\r\n                }\r\n            " +
                    "}\r\n            return r;\r\n        }\r\n\r\n        private static DatabaseLoader sIn" +
                    "stance = null;\r\n        public static DatabaseLoader Instance\r\n        {\r\n      " +
                    "      get\r\n            {\r\n                if (sInstance == null)\r\n              " +
                    "  {\r\n                    sInstance = new DatabaseLoader();\r\n                }\r\n " +
                    "               return sInstance;\r\n            }\r\n        }\r\n\r\n        public sta" +
                    "tic void Dispose()\r\n        {\r\n            if (sInstance != null) sInstance.Dest" +
                    "roy();\r\n            sInstance = null;\r\n        }\r\n\r\n        public List<string> " +
                    "LoadTableNames()\r\n        {\r\n            List<string> list = new List<string>();" +
                    "\r\n            SqlCommand command = new SqlCommand(@\"");
            
            #line 115 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generator.LoadTablesSqlQuery));
            
            #line default
            #line hidden
            this.Write(@""" , SqlConnection);
            command.CommandType = System.Data.CommandType.Text;

            using (SqlDataReader reader = command.ExecuteReader())
            {
                string name = """";
                while (reader.Read())
                {
                    try
                    {
                        name = reader.GetString(0);
                    } catch(Exception) {
                        name = """";
                    }
                    if (name != null && name.Length != 0) list.Add(name); 
                }
            }
            return list;
        }

        public void Destroy()
        {
            Disconnect();
        }

        

        public string DataSource { get; set; } = @""");
            
            #line 142 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generator.DataSource));
            
            #line default
            #line hidden
            this.Write("\";\r\n        public string DatabaseName { get; set; } = @\"");
            
            #line 143 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generator.DatabaseName));
            
            #line default
            #line hidden
            this.Write("\";\r\n        public string Username { get; set; } = @\"");
            
            #line 144 "C:\Users\trung\source\repos\SEP_CRUD\SEP_CRUD\Template\Entity\DatabaseLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(generator.Username));
            
            #line default
            #line hidden
            this.Write("\";\r\n        public string Password { get; set; } = \"\";\r\n        public bool Conne" +
                    "cted = false;\r\n\r\n        private SqlConnection SqlConnection { get; set; }\r\n\r\n  " +
                    "      public Result CheckValid()\r\n        {\r\n            if (DataSource == null " +
                    "|| DataSource.Equals(\"\")) return Result.Create(\"Data source is empty\");\r\n       " +
                    "     if (Username == null) return Result.Create(\"Username is undefined\");\r\n     " +
                    "       if (Password == null) return Result.Create(\"Password is undefined\");\r\n   " +
                    "         return Result.Create(true);\r\n        }\r\n        public bool Valid\r\n    " +
                    "    { get\r\n            {\r\n                return CheckValid().GetResult();\r\n    " +
                    "        }\r\n        }\r\n\r\n        public string ConnectionString\r\n        {\r\n     " +
                    "       get\r\n            {\r\n                if (!Valid) return \"\";\r\n             " +
                    "   if (Username.Equals(\"\") && Password.Equals(\"\"))\r\n                    return @" +
                    "\"Data Source=\" + DataSource + \";Initial Catalog=\"\r\n                         + Da" +
                    "tabaseName + \";Persist Security Info=True\";\r\n                return @\"Data Sourc" +
                    "e=\" + DataSource + \";Initial Catalog=\"\r\n                         + DatabaseName " +
                    "+ \";Persist Security Info=True;User ID=\" + Username + \";Password=\" + Password;\r\n" +
                    "            }\r\n        }\r\n\r\n        public SqlCommand LoadCommand(string query)\r" +
                    "\n        {\r\n            SqlCommand c = new SqlCommand(query, SqlConnection);\r\n  " +
                    "          c.CommandType = System.Data.CommandType.Text;\r\n            return c;\r\n" +
                    "        }\r\n\r\n        public Result Connect()\r\n        {\r\n            Result resu" +
                    "lt = CheckValid();\r\n            if (!result.GetResult()) return result;\r\n\r\n     " +
                    "       try\r\n            {\r\n                SqlConnection = new SqlConnection(Con" +
                    "nectionString);\r\n            } catch(Exception e)\r\n            {\r\n              " +
                    "  result = Result.Create(\"Exception: \" + e.Message);\r\n            }\r\n\r\n         " +
                    "   if(result.OK)\r\n            {\r\n                try\r\n                {\r\n       " +
                    "             SqlConnection.Open();\r\n                } catch(Exception e)\r\n      " +
                    "          {\r\n                    result = Result.Create(\"Exception: \" + e.Messag" +
                    "e);\r\n                }\r\n            }\r\n\r\n            Connected = result.OK;\r\n   " +
                    "         return result;\r\n        }\r\n\r\n        public void Disconnect()\r\n        " +
                    "{\r\n            if(SqlConnection!=null)\r\n            try\r\n            {\r\n        " +
                    "            SqlConnection.Close();\r\n            } catch (Exception) { }\r\n       " +
                    " }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class DatabaseLoaderTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
