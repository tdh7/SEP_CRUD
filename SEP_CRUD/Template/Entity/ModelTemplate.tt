<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SEP_CRUD.Entities" #>
using System;
using System.Collections.Generic;
using System.Text;

namespace <# Write(generator.Namespace); #>
{

	public class <# Write(generator.Name); #>
	{
<#     Table table = generator.Table;
            int count = table.Count;
            string attr;
            Column c;
            for(int i =0;i<count;i++)
            {
                c = table[i];

                
                if (c.MapType == MapType.PRIMITIVE)
                {

                    //if(table.PrimaryKey.HasColumn(c))
                    //WriteLine("        [Column( IsPrimaryKey = true, Name = \""+c.DatabaseName+"\" )]");
                    //else
                    //WriteLine("        [Column( Name = \""+c.DatabaseName+"\" )]");

                    WriteLine("        public "+c.BindingType+" "+c.BindingName+"{ get; set; }");
                }
                else
                {
              Column relation = c.ReferenceColumn;
              Table relationTable= relation.Table;
                    //if(table.PrimaryKey.HasColumn(c))
                     //WriteLine("        [Column( IsPrimaryKey = true, Name = \""+c.DatabaseName+"\" )]");
                    //else WriteLine("        [Column( Name = \""+c.DatabaseName+"\" )]");     
                    WriteLine("        private "+c.BindingType+" _"+c.BindingName+";");
                    //WriteLine("        private EntityRef<"+relation.Table.BindingName+"> "+c.BindingName+"Ref = new EntityRef<"+relation.Table.BindingName+">()");
                    //WriteLine("        [Association( Name = \""+c.ForeignKey.DatabaseName+"\", IsForeignKey = true, Storage = \"_"+c.BindingName+"Ref\", ThisKey = \"_"+c.BindingName+"\" )]");   
                    WriteLine("        public "+relationTable.BindingName+" "+c.BindingName+"{ get; set; }");
}
        WriteLine("");
            }
#>
	}
}
