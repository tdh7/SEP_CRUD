<#@ template language="C#" inherits="SharedFormTemplate"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;
using <#= Generator.ProjectOwner.DefaultModelNamespaces #>;

namespace <#= Generator.Namespace #>
{
    public partial class EditDataForm<E, F> : BaseForm
        where E: BaseModel, new()
        where F: EditDataForm<E, F>, new()
    {
        private Func<FormType, E, bool> _saveAction;
        protected BindingSource bindingSourceItem = new BindingSource();
        private FormType currentMode;
		
		public EditDataForm()
        {
            InitializeComponent();
        }

        private static F SetUpForm(E entity, Func<FormType, E, bool> saveAction)
        {
            if (entity == null)
                entity = new E();

            F f = new F();
			entity.BeginEdit();
            f.InitBinder(entity);
            f._saveAction = saveAction;
			return f;
        }

        public static void Edit(E entity, Func<FormType, E, bool> saveAction)
        {
            F f = SetUpForm(entity, saveAction);
			f.currentMode = FormType.FormUpdate;
            f.OnFormLoaded(f, f.currentMode);
            f.ShowDialog();
        }

        public static void Add(Func<FormType, E, bool> saveAction)
        {
            F f = SetUpForm(null, saveAction);
            f.currentMode = FormType.FormAdd;
            f.OnFormLoaded(f, f.currentMode);
            f.ShowDialog();
        }

        protected virtual void OnFormLoaded(object sender, FormType e)
        {
        }

        protected virtual void InitBinder(E entity)
        {
            bindingSourceItem.DataSource = entity;
        }

        private void SaveChange()
        {
            var item = bindingSourceItem.Current as E;
            var success = _saveAction.Invoke(currentMode, item);

			if (success)
			{
				item.EndEdit();
			}
			else
			{
				item.CancelEdit();
			}
        }

        private void UndoChange()
        {
            var item = bindingSourceItem.Current as E;
            item.CancelEdit();
        }

        private void toolStripButtonSave_Click(object sender, EventArgs e)
        {
			Validate();
            SaveChange();
            this.Close();
        }

        private void toolStripButtonUndo_Click(object sender, EventArgs e)
        {
            UndoChange();
        }
    }

    public enum FormType
    {
        FormAdd,
        FormUpdate
    }
}