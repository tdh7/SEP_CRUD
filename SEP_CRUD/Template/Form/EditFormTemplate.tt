<#@ template language="C#" inherits="SharedFormTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SEP_CRUD.Entities" #>
<# var EntityName = Table.BindingName; #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;
using <#= Generator.ProjectOwner.DefaultModelNamespaces #>;

namespace <# Write(Generator.Namespace); #>
{
    public partial class Edit<#= EntityName #>Form : Edit<#= EntityName #>FormBase
    {
        public Edit<#= EntityName #>Form()
        {
            InitializeComponent();
        }

		 protected override void InitBinder(<#= EntityName #> entity)
        {
            base.InitBinder(entity);
<#
    for (int i = 0; i < Table.Count; i++)
    {
		WriteDataBinding(Table[i]);
    } 
#>			
        }

        protected override void OnFormLoaded(object sender, FormType e)
        {
            if (e == FormType.FormAdd)
            {
<#
    for (int i = 0; i < Table.Count; i++)
    {
		Column c = Table[i];
		if (c.IsAbleBindingToTextBoxControl() && c.IsPrimaryKey)
			setReadOnlyTextBox(c.BindingName, "false");
    } 
#>

            }
            else if (e == FormType.FormUpdate)
            {
<#
    for (int i = 0; i < Table.Count; i++)
    {
		Column c = Table[i];
		if (c.IsAbleBindingToTextBoxControl() && c.IsPrimaryKey)
			setReadOnlyTextBox(c.BindingName, "true");
    } 
#>
            }
        }
    }

    // This additional inheritance is required to avoid a WinForms bug,
    // which does not allow using generic classes as base classes for forms and uer controls.
	
    public class Edit<#= EntityName #>FormBase: EditDataForm<<#= EntityName #>, Edit<#= EntityName #>Form> { }
}
<#+ 
private void WriteDataBinding(Column c)
{
	var name = c.BindingName;
	if (c.IsAbleBindingToTextBoxControl())
    {
#>
			textBox<#= name #>.DataBindings.Add("Text", bindingSourceItem, "<#= name #>", true, DataSourceUpdateMode.OnValidation, string.Empty);
<#+ 
    }

	if (c.IsAbleBindingToDateTimePicker())
    {
#>
			dateTimePicker<#= name #>.DataBindings.Add("Value", bindingSourceItem, "<#= name #>", true, DataSourceUpdateMode.OnValidation, DateTime.Now);
<#+ }
}
#>
<#+
void setReadOnlyTextBox(string name, string b)
{
#>
				textBox<#= name #>.ReadOnly = <#= b #>;
<#+
} 
#>