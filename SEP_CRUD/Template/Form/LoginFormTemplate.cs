// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SEP_CRUD.Template.Form
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\Library\IT\Subject\Design Pattern\SEP_CRUD2\SEP_CRUD\SEP_CRUD\Template\Form\LoginFormTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class LoginFormTemplate : SharedFormGenerator
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusin" +
                    "g System.Data;\r\nusing System.Data.Sql;\r\nusing System.ComponentModel;\r\nusing Syst" +
                    "em.Data.SqlClient;\r\nusing System.Windows.Forms;\r\n\r\nnamespace ");
            
            #line 15 "F:\Library\IT\Subject\Design Pattern\SEP_CRUD2\SEP_CRUD\SEP_CRUD\Template\Form\LoginFormTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.Namespace));
            
            #line default
            #line hidden
            this.Write(@"
{
    public partial class LoginForm : BaseForm
    {
        private WaitingForm waitForm = new WaitingForm();
        private IList<string> DbInstanceList = new List<string>();
        private DataTable DBNameTable;

        public EventHandler<string> OnLoginSuccessHandler;

        public LoginForm()
        {
            InitializeComponent();

            // binding ui control to SqlConnectionStringBuilder
            loginInfoBindingSource.DataSource = new SqlConnectionStringBuilder();
            comboBoxServerList.DataBindings.Add(""Text"", loginInfoBindingSource, ""DataSource"");
            textBoxLogin.DataBindings.Add(""Text"", loginInfoBindingSource, ""UserID"");
            textBoxPassword.DataBindings.Add(""Text"", loginInfoBindingSource, ""Password"");
        }

        #region All control event
        private void comboBoxServerList_DropDown(object sender, EventArgs e)
        {
            RetrieveAllDbInstanceIfEmpty();
        }

        private void buttonConnect_Click(object sender, EventArgs e)
        {
            var connectionStringBuilder = loginInfoBindingSource.Current as SqlConnectionStringBuilder;
            connectionStringBuilder.InitialCatalog = """);
            
            #line 45 "F:\Library\IT\Subject\Design Pattern\SEP_CRUD2\SEP_CRUD\SEP_CRUD\Template\Form\LoginFormTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DBName));
            
            #line default
            #line hidden
            this.Write("\";\r\n            if (TestDBConnection(connectionStringBuilder))\r\n            {\r\n  " +
                    "              var connectionString = connectionStringBuilder.ConnectionString;\r\n" +
                    "                OnLoginSuccessHandler?.Invoke(this, connectionString);\r\n        " +
                    "        this.Close();\r\n            }\r\n            else\r\n            {\r\n         " +
                    "       MessageBox.Show(\"Connection failed\");\r\n            }\r\n\r\n        }\r\n\r\n    " +
                    "    private void buttonCancel_Click(object sender, EventArgs e)\r\n        {\r\n    " +
                    "        this.Close();\r\n        }\r\n\r\n        #endregion\r\n\r\n        private void R" +
                    "etrieveAllDbInstanceIfEmpty()\r\n        {\r\n            if (DbInstanceList.Count =" +
                    "= 0)\r\n            {\r\n                BackgroundWorker bgWorker = new BackgroundW" +
                    "orker();\r\n                bgWorker.DoWork += BgWorker_RetrieveDbInstance;\r\n     " +
                    "           bgWorker.RunWorkerCompleted += BgWorker_RetrieveDbInstanceCompleted;\r" +
                    "\n                bgWorker.RunWorkerAsync();\r\n                waitForm.ShowDialog" +
                    "();\r\n            }\r\n        }\r\n\r\n        private void BgWorker_RetrieveDbInstanc" +
                    "eCompleted(object sender, RunWorkerCompletedEventArgs e)\r\n        {\r\n           " +
                    " waitForm.Close();\r\n\r\n            DataTable dbInstanceTable = e.Result as DataTa" +
                    "ble;\r\n            ConvertTableToList(dbInstanceTable, DbInstanceList);\r\n        " +
                    "    InitComboboxServerList();\r\n        }\r\n\r\n        private void BgWorker_Retrie" +
                    "veDbInstance(object sender, DoWorkEventArgs e)\r\n        {\r\n            SqlDataSo" +
                    "urceEnumerator instance = SqlDataSourceEnumerator.Instance;\r\n            DataTab" +
                    "le table = instance.GetDataSources();\r\n            e.Result = table;\r\n        }\r" +
                    "\n\r\n        private bool TestDBConnection(SqlConnectionStringBuilder builder)\r\n  " +
                    "      {\r\n            bool connectable = true;\r\n            try\r\n            {\r\n " +
                    "               var connectionString = builder.ConnectionString;\r\n               " +
                    " using (SqlConnection connection = new SqlConnection(connectionString))\r\n       " +
                    "         {\r\n                    connection.Open();\r\n                }\r\n         " +
                    "   }\r\n            catch (Exception e)\r\n            {\r\n                Console.Wr" +
                    "iteLine(e);\r\n                connectable = false;\r\n            }\r\n\r\n            " +
                    "return connectable;\r\n        }\r\n\r\n        private void ConvertTableToList(DataTa" +
                    "ble dbInstanceTable, IList<string> serverInstances)\r\n        {\r\n            if (" +
                    "dbInstanceTable == null)\r\n                return;\r\n\r\n            foreach (DataRo" +
                    "w row in dbInstanceTable.Rows)\r\n            {\r\n                serverInstances.A" +
                    "dd($@\"{row[\"ServerName\"]}\\{row[\"InstanceName\"]}\");\r\n            }\r\n        }\r\n\r\n" +
                    "        private void InitComboboxServerList()\r\n        {\r\n            comboBoxSe" +
                    "rverList.DataSource = DbInstanceList;\r\n            comboBoxServerList.SelectedIn" +
                    "dex = -1;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
